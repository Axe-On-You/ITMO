           ORG 0x0              ; Инициализируем векторы прерываний.
V0:        WORD $DEFAULT, 0x180 ; Вектор 0 – стандартный обработчик.
V1:        WORD $INT1, 0x180    ; Вектор 1 установлен на обр. INT1.
V2:        WORD $DEFAULT, 0x180 ; Вектор 2 – стандартный обработчик.
V3:        WORD $INT3, 0x180    ; Вектор 3 установлен на обр. INT3.
V4:        WORD $DEFAULT, 0x180 ; Вектор 4 – стандартный обработчик.
V5:        WORD $DEFAULT, 0x180 ; Вектор 5 – стандартный обработчик.
V6:        WORD $DEFAULT, 0x180 ; Вектор 6 – стандартный обработчик.
V7:        WORD $DEFAULT, 0x180 ; Вектор 7 – стандартный обработчик.
DEFAULT:   IRET                 ; Стандартный обработчик: просто
                                ; возвращает из прерывания.

           ORG 0x020
START:     DI                   ; На время инициализации векторов.
                                ; запретим какие-либо прерывания.
           LD #0x9              ; Инициализируем прерывание ВУ-1.
           OUT 0x3              ; на вектор 1 (и разрешим его).
           LD #0xB              ; Инициализируем прерывание ВУ-3.
           OUT 0x7              ; на вектор 3 (и разрешим его).
           CLA                  ; Остальные прерывания ВУ будут.
           OUT 0x1              ; назначены на вектор 0.
           OUT 0x3              ; (и вообще запрещены на уровне КВУ).
           OUT 0xB              ; ….
           OUT 0xE              ; ….
           OUT 0x12             ; ….
           OUT 0x16             ; ….
           OUT 0x1A             ; ….
           OUT 0x1E             ; ….
           JUMP $PROG           ; Векторы назначены. Двигаемся в
                                ; основной цикл…

           ORG 0x030
ADDR_X:    WORD 0x031           ; Указатель на X.
X:         WORD 0x001               ; Основная переменная программы.
PROG:      EI                   ; Разрешаем прерывания.
           LD ADDR_X            ; Загрузим адрес X.
           PUSH                 ; И положим адрес в стек.
INCLP:     CALL $AT_INC         ; Вызываем атомарную операцию +3.
           JUMP INCLP           ; Это вся суть основного цикла.

           ORG 0x040
TEMP_ADDR: WORD ?               ; Врем. ячейка для адреса аргумента.
AT_INC:    DI                   ; Атомарное увел. яч. памяти на 2.
           LD &1                ; Загрузим адрес операнда.
           ST TEMP_ADDR         ; Сохраним во временную ячейку.
           LD (TEMP_ADDR)       ; Загрузим операнд.
           NOP                  ; Точка отладки 1.
           INC                  ; Увеличим его на 3.
           INC                  ; Прерывания были
           INC                  ; запрещены до этого.
           CALL $AAV_CHECK      ; Сверим с ОДЗ полученный результат.
           ST (TEMP_ADDR)       ; Сохраним его в ячейку памяти.
           NOP                  ; Точка отладки 2.
           EI                   ; Снова разрешим прерывания.
           RET                  ; И вернем логику управления.

           ORG 0x050            ; Обработчик вектора прерываний 1.
INT1:      NOP                  ; Точка отладки 3.
           PUSH                 ; Сохраним состояние AC.
           LD $X                ; Загрузим X в AC.
           ASL                  ; Арифметический сдвиг влево (X*2).
           ADD $X               ; 2*X + X -> AC (3*X).
           NEG                  ; AC (3*X) -> AC (-3*X).
           OUT 2                ; Итоговый результат F(X) на ВУ-1.
           POP                  ; Вернем состояние AC.
           NOP                  ; Точка отладки 4.
           IRET                 ; Выйдем из текущего прерывания.

           ORG 0x060            ; Обработчик вектора прерываний 3
INT3:      NOP                  ; Точка отладки 5.
           PUSH                 ; Сохраним состояние AC.
           IN 0x6               ; Произведем чтение с ВУ-3.
           ADD $X               ; Прибавим X к РДВУ-3 (РДВУ-3 + X).
           ST $X                ; Сохраним в X.
           POP                  ; Вернем состояние AC.
           NOP                  ; Точка отладки 6.
           IRET                 ; Выйдем из текущего прерывания.

           ORG 0x070
AAV_CHECK: CMP MAX_VAL          ; Проверим верхнюю границу ОДЗ.
           BEQ AAV_RET          ;  Они равны? Да – на выход.
           BGE RESET            ; Результат больше? Сбрасываем его.
           CMP MIN_VAL          ; Проверим нижнюю границу ОДЗ.
           BGE AAV_RET          ; Результат больше? На выход.
RESET:     LD MIN_VAL           ; Иначе сбросим до минимального числа.
AAV_RET:   RET                  ; Тот самый выход!
MIN_VAL:   WORD 0xFFD5          ; Нижняя граница ОДЗ.
MAX_VAL:   WORD 0x002A          ; Верхняя граница ОДЗ.